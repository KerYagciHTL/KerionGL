name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    env:
      BUILD_TYPE: Release
      GLFW_TAG: 3.3-stable

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Deps
      - name: Deps (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y xorg-dev libx11-dev libxrandr-dev libxinerama-dev \
            libxcursor-dev libxi-dev libgl1-mesa-dev ccache ninja-build

      - name: Deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install ccache ninja

      - name: Deps (Windows)
        if: runner.os == 'Windows'
        run: choco install -y ninja ccache

      # ccache
      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ccache
            ~/Library/Caches/ccache
            C:\Users\runneradmin\AppData\Local\ccache
          key: >
            ccache-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ env.GLFW_TAG }}-
            ${{ hashFiles(
              'CMakeLists.txt',
              'cmake/**/*.cmake',
              'src/**/*.[ch]',
              'src/**/*.[ch]pp',
              'src/**/*.cxx',
              'include/**/*.[ch]',
              'include/**/*.[ch]pp',
              'include/**/*.cxx',
              'vendor/prepare.sh'
            ) }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.BUILD_TYPE }}-${{ env.GLFW_TAG }}-
            ccache-${{ runner.os }}-

      - name: Prepare vendor (bash on all OS)
        shell: bash
        run: vendor/prepare.sh

      - name: Set up CMake
        uses: jwlawson/actions-setup-cmake@v2

      - name: Configure (CMake + Ninja + ccache)
        run: >
          cmake -S . -B build
          -G Ninja
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Build
        run: cmake --build build --parallel

      - name: Test (Linux/macOS)
        if: runner.os != 'Windows'
        run: ctest --test-dir build --output-on-failure

      - name: Test (Windows)
        if: runner.os == 'Windows'
        run: ctest --test-dir build -C ${{ env.BUILD_TYPE }} --output-on-failure
